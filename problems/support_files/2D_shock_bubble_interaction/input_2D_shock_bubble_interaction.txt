Application = "Euler"

Euler
{
    // Name of project
    project_name = "2D shock-bubble interaction"
    
    // Number of species
    num_species = 2
    
    // Flow model to use
    flow_model = "FIVE_EQN_ALLAIRE"
    
    Flow_model
    {
        // Equation of state to use
        equation_of_state = "IDEAL_GAS"
        
        Equation_of_state_mixing_rules
        {
            species_gamma = 1.648, 1.4
            species_R = 1.0, 1.0
        }
    }
    
    // Convective flux reconstructor to use
    convective_flux_reconstructor = "WCNS6_LD_HLLC_HLL"
    
    Convective_flux_reconstructor{}
    
    Boundary_data
    {
        boundary_edge_xlo
        {
            boundary_condition = "FLOW"
        }
        boundary_edge_xhi
        {
            boundary_condition = "FLOW"
        }
        boundary_edge_ylo
        {
            boundary_condition = "REFLECT"
        }
        boundary_edge_yhi
        {
            boundary_condition = "REFLECT"
        }
        
        boundary_node_xlo_ylo
        {
            boundary_condition = "YREFLECT"
        }
        boundary_node_xhi_ylo
        {
            boundary_condition = "YREFLECT"
        }
        boundary_node_xlo_yhi
        {
            boundary_condition = "YREFLECT"
        }
        boundary_node_xhi_yhi
        {
            boundary_condition = "YREFLECT"
        }
    }
}

Main
{
    // Dimension of problem
    dim = 2
    
    // Base name of log file
    base_name = "2D_shock_bubble_interaction"
   
    // Whether all nodes log to individual files,
    // if false only node 0 will log 
    log_all_nodes = TRUE
    
    // Visualization dump parameters
    // Setting to dump viz output: CONSTANT_TIME_INTERVAL, CONSTANT_TIMESTEP_INTERVAL
    viz_dump_setting = "CONSTANT_TIME_INTERVAL"
    // Frequency at which to dump viz output (0 to turn off)
    viz_dump_interval = 5.0e-2
    // Name of directory in which to place viz output
    viz_dump_dirname = "viz_2D_shock_bubble_interaction"
    // Number of processors which write to each viz file
    visit_number_procs_per_file = 1
    
    // Restart dump parameters
    // Frequency at which to dump restart output
    // (-1 to be as same as viz_dump_interval, 0 to turn off)
    restart_interval = -1
}

CartesianGeometry
{
    domain_boxes = [(0, 0), (649, 177)] // Lower and upper indices of compuational domain
    x_lo         = 0.0, -0.89           // Lower end of computational domain
    x_up         = 6.5, 0.89            // Upper end of computational domain
    
    // Periodic_dimension. A non-zero value indicates that the direction is periodic
    periodic_dimension = 0, 0
}

ExtendedTagAndInitialize{}

PatchHierarchy
{
    // Maximum number of levels in hierarchy
    max_levels = 1
    
    ratio_to_coarser{}
    
    largest_patch_size
    {
        level_0 = 1000, 1000
    }

    smallest_patch_size
    {
        level_0 =  4, 4
    }
}

GriddingAlgorithm{}

RungeKuttaLevelIntegrator
{
    cfl                       = 0.5e0   // Max cfl factor used in problem
    cfl_init                  = 0.5e0   // Initial cfl factor
    lag_dt_computation        = FALSE
    use_ghosts_to_compute_dt  = TRUE
}

TimeRefinementIntegrator
{
   start_time           = 0.0    // Initial simulation time
   end_time             = 7.0    // Final simulation time
   grow_dt              = 1.0    // Growth factor for timesteps
   max_integrator_steps = 100000 // Max number of simulation timesteps
}

TimerManager
{
    print_threshold = 0.01
    timer_list      = "apps::main::*"
}

